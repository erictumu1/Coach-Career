"use client";

import {
  Background,
  ReactFlow,
  ReactFlowProvider,
  useReactFlow,
} from "@xyflow/react";
import "@xyflow/react/dist/style.css";
import dynamic from "next/dynamic";
import { useEffect } from "react";
import TurboNode from "./TurboNode";

const DynamicReactFlow = dynamic(
  () => import("@xyflow/react").then((mod) => mod.ReactFlow),
  { ssr: false }
);

const nodeTypes = {
  turbo: TurboNode,
};

function RoadmapInner({
  allNodes,
  allEdges,
}: {
  allNodes: any[];
  allEdges: any[];
}) {
  const { fitView } = useReactFlow();

  useEffect(() => {
    fitView({ padding: 0.2 });
  }, [allNodes, allEdges, fitView]);

  return (
    <ReactFlow nodes={allNodes} edges={allEdges} nodeTypes={nodeTypes}>
      <Background gap={20} size={1} />
    </ReactFlow>
  );
}

function Roadmapcanvas({
  initialNodes = [],
  nodes = [],
  edges = [],
  edges2 = [],
}: {
  initialNodes?: any[];
  nodes?: any[];
  edges?: any[];
  edges2?: any[];
}) {
  const allNodes = [...initialNodes, ...nodes].map((node) => ({
    ...node,
    type: "turbo",
  }));

  const autoGeneratedInitialEdges = initialNodes
    .map((node, index) => {
      const nextNode = initialNodes[index + 1];
      return nextNode
        ? {
            id: `e${node.id}-${nextNode.id}`,
            source: node.id,
            target: nextNode.id,
            type: "default",
          }
        : null;
    })
    .filter(Boolean);

  const allEdges = [...edges, ...edges2, ...autoGeneratedInitialEdges];

  return (
    <div
      style={{
        width: "100%",
        height: "100%",
        backgroundColor: "#f0f7f7",
        borderRadius: "12px",
        border: "2px solid #0e545b",
      }}
    >
      <ReactFlowProvider>
        <RoadmapInner allNodes={allNodes} allEdges={allEdges} />
      </ReactFlowProvider>
    </div>
  );
}

export default Roadmapcanvas;
